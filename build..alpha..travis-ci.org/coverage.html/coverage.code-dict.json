{"/home/travis/build/npmtest/node-npmtest-livereload/test.js":"/* istanbul instrument in package npmtest_livereload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-livereload/lib.npmtest_livereload.js":"/* istanbul instrument in package npmtest_livereload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_livereload = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_livereload = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-livereload/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-livereload && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_livereload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_livereload\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_livereload.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_livereload.rollup.js'] =\n            local.assetsDict['/assets.npmtest_livereload.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_livereload.__dirname + '/lib.npmtest_livereload.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-livereload/node_modules/livereload/lib/livereload.js":"// Generated by CoffeeScript 1.12.4\n(function() {\n  var Server, chokidar, defaultExclusions, defaultExts, defaultPort, fs, http, https, path, protocol_version, url, ws;\n\n  fs = require('fs');\n\n  path = require('path');\n\n  ws = require('ws');\n\n  http = require('http');\n\n  https = require('https');\n\n  url = require('url');\n\n  chokidar = require('chokidar');\n\n  protocol_version = '7';\n\n  defaultPort = 35729;\n\n  defaultExts = ['html', 'css', 'js', 'png', 'gif', 'jpg', 'php', 'php5', 'py', 'rb', 'erb', 'coffee'];\n\n  defaultExclusions = [/\\.git\\//, /\\.svn\\//, /\\.hg\\//];\n\n  Server = (function() {\n    function Server(config1) {\n      var base, base1, base2, base3, base4, base5, base6, base7;\n      this.config = config1;\n      if (this.config == null) {\n        this.config = {};\n      }\n      if ((base = this.config).version == null) {\n        base.version = protocol_version;\n      }\n      if ((base1 = this.config).port == null) {\n        base1.port = defaultPort;\n      }\n      if ((base2 = this.config).exts == null) {\n        base2.exts = [];\n      }\n      if ((base3 = this.config).exclusions == null) {\n        base3.exclusions = [];\n      }\n      this.config.exts = this.config.exts.concat(defaultExts);\n      this.config.exclusions = this.config.exclusions.concat(defaultExclusions);\n      if ((base4 = this.config).applyCSSLive == null) {\n        base4.applyCSSLive = true;\n      }\n      if ((base5 = this.config).originalPath == null) {\n        base5.originalPath = '';\n      }\n      if ((base6 = this.config).overrideURL == null) {\n        base6.overrideURL = '';\n      }\n      if ((base7 = this.config).usePolling == null) {\n        base7.usePolling = false;\n      }\n    }\n\n    Server.prototype.listen = function(callback) {\n      this.debug(\"LiveReload is waiting for browser to connect.\");\n      this.debug(\"Protocol version: \" + this.config.version + \"\\nExclusions: \" + this.config.exclusions + \"\\nExtensions: \" + this.config.exts + \"\\nPolling: \" + this.config.usePolling + \"\\n\");\n      if (this.config.server) {\n        this.config.server.listen(this.config.port);\n        this.server = new ws.Server({\n          server: this.config.server\n        });\n      } else {\n        this.server = new ws.Server({\n          port: this.config.port\n        });\n      }\n      this.server.on('connection', this.onConnection.bind(this));\n      this.server.on('close', this.onClose.bind(this));\n      if (callback) {\n        return this.server.once('listening', callback);\n      }\n    };\n\n    Server.prototype.onConnection = function(socket) {\n      this.debug(\"Browser connected.\");\n      socket.on('message', (function(_this) {\n        return function(message) {\n          var data, request;\n          _this.debug(\"Client message: \" + message);\n          request = JSON.parse(message);\n          if (request.command === \"hello\") {\n            _this.debug(\"Client requested handshake...\");\n            _this.debug(\"Handshaking with client using protocol \" + _this.config.version + \"...\");\n            data = JSON.stringify({\n              command: 'hello',\n              protocols: ['http://livereload.com/protocols/official-7', 'http://livereload.com/protocols/official-8', 'http://livereload.com/protocols/official-9', 'http://livereload.com/protocols/2.x-origin-version-negotiation', 'http://livereload.com/protocols/2.x-remote-control'],\n              serverName: 'node-livereload'\n            });\n            return socket.send(data);\n          }\n        };\n      })(this));\n      socket.on('error', (function(_this) {\n        return function(err) {\n          return _this.debug(\"Error in client socket: \" + err);\n        };\n      })(this));\n      return socket.on('close', (function(_this) {\n        return function(message) {\n          return _this.debug(\"Client closed connection\");\n        };\n      })(this));\n    };\n\n    Server.prototype.onClose = function(socket) {\n      return this.debug(\"Socket closed.\");\n    };\n\n    Server.prototype.watch = function(paths) {\n      this.debug(\"Watching \" + paths + \"...\");\n      return this.watcher = chokidar.watch(paths, {\n        ignoreInitial: true,\n        ignored: this.config.exclusions,\n        usePolling: this.config.usePolling\n      }).on('add', this.filterRefresh.bind(this)).on('change', this.filterRefresh.bind(this)).on('unlink', this.filterRefresh.bind(this));\n    };\n\n    Server.prototype.filterRefresh = function(filepath) {\n      var delayedRefresh, exts, fileext;\n      exts = this.config.exts;\n      fileext = path.extname(filepath).substring(1);\n      if (exts.indexOf(fileext) !== -1) {\n        if (this.config.delay) {\n          return delayedRefresh = setTimeout((function(_this) {\n            return function() {\n              clearTimeout(delayedRefresh);\n              return _this.refresh(filepath);\n            };\n          })(this), this.config.delay);\n        } else {\n          return this.refresh(filepath);\n        }\n      }\n    };\n\n    Server.prototype.refresh = function(filepath) {\n      var data;\n      this.debug(\"Reloading: \" + filepath);\n      data = JSON.stringify({\n        command: 'reload',\n        path: filepath,\n        liveCSS: this.config.applyCSSLive,\n        liveImg: this.config.applyImgLive,\n        originalPath: this.config.originalPath,\n        overrideURL: this.config.overrideURL\n      });\n      return this.sendAllClients(data);\n    };\n\n    Server.prototype.alert = function(message) {\n      var data;\n      this.debug(\"Alert: \" + message);\n      data = JSON.stringify({\n        command: 'alert',\n        message: message\n      });\n      return this.sendAllClients(data);\n    };\n\n    Server.prototype.sendAllClients = function(data) {\n      var i, len, ref, results, socket;\n      ref = this.server.clients;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        results.push(socket.send(data, (function(_this) {\n          return function(error) {\n            if (error) {\n              return _this.debug(error);\n            }\n          };\n        })(this)));\n      }\n      return results;\n    };\n\n    Server.prototype.debug = function(str) {\n      if (this.config.debug) {\n        return console.log(str + \"\\n\");\n      }\n    };\n\n    Server.prototype.close = function() {\n      this.watcher.close();\n      this.server._server.close();\n      return this.server.close();\n    };\n\n    return Server;\n\n  })();\n\n  exports.createServer = function(config, callback) {\n    var app, requestHandler, server;\n    if (config == null) {\n      config = {};\n    }\n    requestHandler = function(req, res) {\n      if (url.parse(req.url).pathname === '/livereload.js') {\n        res.writeHead(200, {\n          'Content-Type': 'text/javascript'\n        });\n        return res.end(fs.readFileSync(__dirname + '/../ext/livereload.js'));\n      }\n    };\n    if (config.https == null) {\n      app = http.createServer(requestHandler);\n    } else {\n      app = https.createServer(config.https, requestHandler);\n    }\n    if (config.server == null) {\n      config.server = app;\n    }\n    server = new Server(config);\n    if (!config.noListen) {\n      server.listen(callback);\n    }\n    return server;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-livereload/node_modules/livereload/bin/livereload.js":"#!/usr/bin/env node\nrequire('../lib/command').run();\n\n","/home/travis/build/npmtest/node-npmtest-livereload/node_modules/livereload/lib/command.js":"// Generated by CoffeeScript 1.12.4\n(function() {\n  var runner;\n\n  runner = function() {\n    var debug, exclusions, exts, livereload, opts, path, pjson, port, resolve, server, usePolling, version, wait;\n    pjson = require('../package.json');\n    version = pjson.version;\n    livereload = require('./livereload');\n    resolve = require('path').resolve;\n    opts = require('opts');\n    debug = false;\n    opts.parse([\n      {\n        short: \"v\",\n        long: \"version\",\n        description: \"Show the version\",\n        required: false,\n        callback: function() {\n          console.log(version);\n          return process.exit(1);\n        }\n      }, {\n        short: \"p\",\n        long: \"port\",\n        description: \"Specify the port\",\n        value: true,\n        required: false\n      }, {\n        short: \"x\",\n        long: \"exclusions\",\n        description: \"Exclude files by specifying an array of regular expressions. Will be appended to default value which is [/\\.git\\//, /\\.svn\\//, /\\.hg\\//]\",\n        required: false,\n        value: true\n      }, {\n        short: \"d\",\n        long: \"debug\",\n        description: \"Additional debugging information\",\n        required: false,\n        callback: function() {\n          return debug = true;\n        }\n      }, {\n        short: \"e\",\n        long: \"exts\",\n        description: \"An array of extensions you want to observe. An example 'jade scss' (quotes are required). In addition to the defaults (html, css, js, png, gif, jpg, php, php5, py, rb, erb, and \\\"coffee.\\\").\",\n        required: false,\n        value: true\n      }, {\n        short: \"u\",\n        long: \"usepolling\",\n        description: \"Poll for file system changes. Set this to true to successfully watch files over a network.\",\n        required: false,\n        value: true\n      }, {\n        short: \"w\",\n        long: \"wait\",\n        description: \"delay message of file system changes to browser by `delay` milliseconds\",\n        required: false,\n        value: true\n      }\n    ].reverse(), true);\n    port = opts.get('port') || 35729;\n    exclusions = opts.get('exclusions') ? opts.get('exclusions').split(',').map(function(s) {\n      return new RegExp(s);\n    }) : [];\n    exts = opts.get('exts') ? opts.get('exts').split(',') : [];\n    usePolling = opts.get('usepolling') || false;\n    wait = opts.get('wait') || 0;\n    server = livereload.createServer({\n      port: port,\n      debug: debug,\n      exclusions: exclusions,\n      exts: exts,\n      usePolling: usePolling,\n      delay: wait\n    });\n    path = (process.argv[2] || '.').split(/\\s*,\\s*/).map(function(x) {\n      return resolve(x);\n    });\n    console.log(\"Starting LiveReload v\" + version + \" for \" + path + \" on port \" + port + \".\");\n    return server.watch(path);\n  };\n\n  module.exports = {\n    run: runner\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-livereload/node_modules/livereload/ext/livereload.js":"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function() {\n  var Connector, PROTOCOL_6, PROTOCOL_7, Parser, Version, _ref;\n\n  _ref = require('./protocol'), Parser = _ref.Parser, PROTOCOL_6 = _ref.PROTOCOL_6, PROTOCOL_7 = _ref.PROTOCOL_7;\n\n  Version = '2.2.2';\n\n  exports.Connector = Connector = (function() {\n    function Connector(options, WebSocket, Timer, handlers) {\n      this.options = options;\n      this.WebSocket = WebSocket;\n      this.Timer = Timer;\n      this.handlers = handlers;\n      this._uri = \"ws\" + (this.options.https ? \"s\" : \"\") + \"://\" + this.options.host + \":\" + this.options.port + \"/livereload\";\n      this._nextDelay = this.options.mindelay;\n      this._connectionDesired = false;\n      this.protocol = 0;\n      this.protocolParser = new Parser({\n        connected: (function(_this) {\n          return function(protocol) {\n            _this.protocol = protocol;\n            _this._handshakeTimeout.stop();\n            _this._nextDelay = _this.options.mindelay;\n            _this._disconnectionReason = 'broken';\n            return _this.handlers.connected(protocol);\n          };\n        })(this),\n        error: (function(_this) {\n          return function(e) {\n            _this.handlers.error(e);\n            return _this._closeOnError();\n          };\n        })(this),\n        message: (function(_this) {\n          return function(message) {\n            return _this.handlers.message(message);\n          };\n        })(this)\n      });\n      this._handshakeTimeout = new Timer((function(_this) {\n        return function() {\n          if (!_this._isSocketConnected()) {\n            return;\n          }\n          _this._disconnectionReason = 'handshake-timeout';\n          return _this.socket.close();\n        };\n      })(this));\n      this._reconnectTimer = new Timer((function(_this) {\n        return function() {\n          if (!_this._connectionDesired) {\n            return;\n          }\n          return _this.connect();\n        };\n      })(this));\n      this.connect();\n    }\n\n    Connector.prototype._isSocketConnected = function() {\n      return this.socket && this.socket.readyState === this.WebSocket.OPEN;\n    };\n\n    Connector.prototype.connect = function() {\n      this._connectionDesired = true;\n      if (this._isSocketConnected()) {\n        return;\n      }\n      this._reconnectTimer.stop();\n      this._disconnectionReason = 'cannot-connect';\n      this.protocolParser.reset();\n      this.handlers.connecting();\n      this.socket = new this.WebSocket(this._uri);\n      this.socket.onopen = (function(_this) {\n        return function(e) {\n          return _this._onopen(e);\n        };\n      })(this);\n      this.socket.onclose = (function(_this) {\n        return function(e) {\n          return _this._onclose(e);\n        };\n      })(this);\n      this.socket.onmessage = (function(_this) {\n        return function(e) {\n          return _this._onmessage(e);\n        };\n      })(this);\n      return this.socket.onerror = (function(_this) {\n        return function(e) {\n          return _this._onerror(e);\n        };\n      })(this);\n    };\n\n    Connector.prototype.disconnect = function() {\n      this._connectionDesired = false;\n      this._reconnectTimer.stop();\n      if (!this._isSocketConnected()) {\n        return;\n      }\n      this._disconnectionReason = 'manual';\n      return this.socket.close();\n    };\n\n    Connector.prototype._scheduleReconnection = function() {\n      if (!this._connectionDesired) {\n        return;\n      }\n      if (!this._reconnectTimer.running) {\n        this._reconnectTimer.start(this._nextDelay);\n        return this._nextDelay = Math.min(this.options.maxdelay, this._nextDelay * 2);\n      }\n    };\n\n    Connector.prototype.sendCommand = function(command) {\n      if (this.protocol == null) {\n        return;\n      }\n      return this._sendCommand(command);\n    };\n\n    Connector.prototype._sendCommand = function(command) {\n      return this.socket.send(JSON.stringify(command));\n    };\n\n    Connector.prototype._closeOnError = function() {\n      this._handshakeTimeout.stop();\n      this._disconnectionReason = 'error';\n      return this.socket.close();\n    };\n\n    Connector.prototype._onopen = function(e) {\n      var hello;\n      this.handlers.socketConnected();\n      this._disconnectionReason = 'handshake-failed';\n      hello = {\n        command: 'hello',\n        protocols: [PROTOCOL_6, PROTOCOL_7]\n      };\n      hello.ver = Version;\n      if (this.options.ext) {\n        hello.ext = this.options.ext;\n      }\n      if (this.options.extver) {\n        hello.extver = this.options.extver;\n      }\n      if (this.options.snipver) {\n        hello.snipver = this.options.snipver;\n      }\n      this._sendCommand(hello);\n      return this._handshakeTimeout.start(this.options.handshake_timeout);\n    };\n\n    Connector.prototype._onclose = function(e) {\n      this.protocol = 0;\n      this.handlers.disconnected(this._disconnectionReason, this._nextDelay);\n      return this._scheduleReconnection();\n    };\n\n    Connector.prototype._onerror = function(e) {};\n\n    Connector.prototype._onmessage = function(e) {\n      return this.protocolParser.process(e.data);\n    };\n\n    return Connector;\n\n  })();\n\n}).call(this);\n\n},{\"./protocol\":6}],2:[function(require,module,exports){\n(function() {\n  var CustomEvents;\n\n  CustomEvents = {\n    bind: function(element, eventName, handler) {\n      if (element.addEventListener) {\n        return element.addEventListener(eventName, handler, false);\n      } else if (element.attachEvent) {\n        element[eventName] = 1;\n        return element.attachEvent('onpropertychange', function(event) {\n          if (event.propertyName === eventName) {\n            return handler();\n          }\n        });\n      } else {\n        throw new Error(\"Attempt to attach custom event \" + eventName + \" to something which isn't a DOMElement\");\n      }\n    },\n    fire: function(element, eventName) {\n      var event;\n      if (element.addEventListener) {\n        event = document.createEvent('HTMLEvents');\n        event.initEvent(eventName, true, true);\n        return document.dispatchEvent(event);\n      } else if (element.attachEvent) {\n        if (element[eventName]) {\n          return element[eventName]++;\n        }\n      } else {\n        throw new Error(\"Attempt to fire custom event \" + eventName + \" on something which isn't a DOMElement\");\n      }\n    }\n  };\n\n  exports.bind = CustomEvents.bind;\n\n  exports.fire = CustomEvents.fire;\n\n}).call(this);\n\n},{}],3:[function(require,module,exports){\n(function() {\n  var LessPlugin;\n\n  module.exports = LessPlugin = (function() {\n    LessPlugin.identifier = 'less';\n\n    LessPlugin.version = '1.0';\n\n    function LessPlugin(window, host) {\n      this.window = window;\n      this.host = host;\n    }\n\n    LessPlugin.prototype.reload = function(path, options) {\n      if (this.window.less && this.window.less.refresh) {\n        if (path.match(/\\.less$/i)) {\n          return this.reloadLess(path);\n        }\n        if (options.originalPath.match(/\\.less$/i)) {\n          return this.reloadLess(options.originalPath);\n        }\n      }\n      return false;\n    };\n\n    LessPlugin.prototype.reloadLess = function(path) {\n      var link, links, _i, _len;\n      links = (function() {\n        var _i, _len, _ref, _results;\n        _ref = document.getElementsByTagName('link');\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          link = _ref[_i];\n          if (link.href && link.rel.match(/^stylesheet\\/less$/i) || (link.rel.match(/stylesheet/i) && link.type.match(/^text\\/(x-)?less$/i))) {\n            _results.push(link);\n          }\n        }\n        return _results;\n      })();\n      if (links.length === 0) {\n        return false;\n      }\n      for (_i = 0, _len = links.length; _i < _len; _i++) {\n        link = links[_i];\n        link.href = this.host.generateCacheBustUrl(link.href);\n      }\n      this.host.console.log(\"LiveReload is asking LESS to recompile all stylesheets\");\n      this.window.less.refresh(true);\n      return true;\n    };\n\n    LessPlugin.prototype.analyze = function() {\n      return {\n        disable: !!(this.window.less && this.window.less.refresh)\n      };\n    };\n\n    return LessPlugin;\n\n  })();\n\n}).call(this);\n\n},{}],4:[function(require,module,exports){\n(function() {\n  var Connector, LiveReload, Options, Reloader, Timer,\n    __hasProp = {}.hasOwnProperty;\n\n  Connector = require('./connector').Connector;\n\n  Timer = require('./timer').Timer;\n\n  Options = require('./options').Options;\n\n  Reloader = require('./reloader').Reloader;\n\n  exports.LiveReload = LiveReload = (function() {\n    function LiveReload(window) {\n      var k, v, _ref;\n      this.window = window;\n      this.listeners = {};\n      this.plugins = [];\n      this.pluginIdentifiers = {};\n      this.console = this.window.console && this.window.console.log && this.window.console.error ? this.window.location.href.match(/LR-verbose/) ? this.window.console : {\n        log: function() {},\n        error: this.window.console.error.bind(this.window.console)\n      } : {\n        log: function() {},\n        error: function() {}\n      };\n      if (!(this.WebSocket = this.window.WebSocket || this.window.MozWebSocket)) {\n        this.console.error(\"LiveReload disabled because the browser does not seem to support web sockets\");\n        return;\n      }\n      if ('LiveReloadOptions' in window) {\n        this.options = new Options();\n        _ref = window['LiveReloadOptions'];\n        for (k in _ref) {\n          if (!__hasProp.call(_ref, k)) continue;\n          v = _ref[k];\n          this.options.set(k, v);\n        }\n      } else {\n        this.options = Options.extract(this.window.document);\n        if (!this.options) {\n          this.console.error(\"LiveReload disabled because it could not find its own <SCRIPT> tag\");\n          return;\n        }\n      }\n      this.reloader = new Reloader(this.window, this.console, Timer);\n      this.connector = new Connector(this.options, this.WebSocket, Timer, {\n        connecting: (function(_this) {\n          return function() {};\n        })(this),\n        socketConnected: (function(_this) {\n          return function() {};\n        })(this),\n        connected: (function(_this) {\n          return function(protocol) {\n            var _base;\n            if (typeof (_base = _this.listeners).connect === \"function\") {\n              _base.connect();\n            }\n            _this.log(\"LiveReload is connected to \" + _this.options.host + \":\" + _this.options.port + \" (protocol v\" + protocol + \").\");\n            return _this.analyze();\n          };\n        })(this),\n        error: (function(_this) {\n          return function(e) {\n            if (e instanceof ProtocolError) {\n              if (typeof console !== \"undefined\" && console !== null) {\n                return console.log(\"\" + e.message + \".\");\n              }\n            } else {\n              if (typeof console !== \"undefined\" && console !== null) {\n                return console.log(\"LiveReload internal error: \" + e.message);\n              }\n            }\n          };\n        })(this),\n        disconnected: (function(_this) {\n          return function(reason, nextDelay) {\n            var _base;\n            if (typeof (_base = _this.listeners).disconnect === \"function\") {\n              _base.disconnect();\n            }\n            switch (reason) {\n              case 'cannot-connect':\n                return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \", will retry in \" + nextDelay + \" sec.\");\n              case 'broken':\n                return _this.log(\"LiveReload disconnected from \" + _this.options.host + \":\" + _this.options.port + \", reconnecting in \" + nextDelay + \" sec.\");\n              case 'handshake-timeout':\n                return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \" (handshake timeout), will retry in \" + nextDelay + \" sec.\");\n              case 'handshake-failed':\n                return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \" (handshake failed), will retry in \" + nextDelay + \" sec.\");\n              case 'manual':\n                break;\n              case 'error':\n                break;\n              default:\n                return _this.log(\"LiveReload disconnected from \" + _this.options.host + \":\" + _this.options.port + \" (\" + reason + \"), reconnecting in \" + nextDelay + \" sec.\");\n            }\n          };\n        })(this),\n        message: (function(_this) {\n          return function(message) {\n            switch (message.command) {\n              case 'reload':\n                return _this.performReload(message);\n              case 'alert':\n                return _this.performAlert(message);\n            }\n          };\n        })(this)\n      });\n      this.initialized = true;\n    }\n\n    LiveReload.prototype.on = function(eventName, handler) {\n      return this.listeners[eventName] = handler;\n    };\n\n    LiveReload.prototype.log = function(message) {\n      return this.console.log(\"\" + message);\n    };\n\n    LiveReload.prototype.performReload = function(message) {\n      var _ref, _ref1;\n      this.log(\"LiveReload received reload request: \" + (JSON.stringify(message, null, 2)));\n      return this.reloader.reload(message.path, {\n        liveCSS: (_ref = message.liveCSS) != null ? _ref : true,\n        liveImg: (_ref1 = message.liveImg) != null ? _ref1 : true,\n        originalPath: message.originalPath || '',\n        overrideURL: message.overrideURL || '',\n        serverURL: \"http://\" + this.options.host + \":\" + this.options.port\n      });\n    };\n\n    LiveReload.prototype.performAlert = function(message) {\n      return alert(message.message);\n    };\n\n    LiveReload.prototype.shutDown = function() {\n      var _base;\n      if (!this.initialized) {\n        return;\n      }\n      this.connector.disconnect();\n      this.log(\"LiveReload disconnected.\");\n      return typeof (_base = this.listeners).shutdown === \"function\" ? _base.shutdown() : void 0;\n    };\n\n    LiveReload.prototype.hasPlugin = function(identifier) {\n      return !!this.pluginIdentifiers[identifier];\n    };\n\n    LiveReload.prototype.addPlugin = function(pluginClass) {\n      var plugin;\n      if (!this.initialized) {\n        return;\n      }\n      if (this.hasPlugin(pluginClass.identifier)) {\n        return;\n      }\n      this.pluginIdentifiers[pluginClass.identifier] = true;\n      plugin = new pluginClass(this.window, {\n        _livereload: this,\n        _reloader: this.reloader,\n        _connector: this.connector,\n        console: this.console,\n        Timer: Timer,\n        generateCacheBustUrl: (function(_this) {\n          return function(url) {\n            return _this.reloader.generateCacheBustUrl(url);\n          };\n        })(this)\n      });\n      this.plugins.push(plugin);\n      this.reloader.addPlugin(plugin);\n    };\n\n    LiveReload.prototype.analyze = function() {\n      var plugin, pluginData, pluginsData, _i, _len, _ref;\n      if (!this.initialized) {\n        return;\n      }\n      if (!(this.connector.protocol >= 7)) {\n        return;\n      }\n      pluginsData = {};\n      _ref = this.plugins;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        plugin = _ref[_i];\n        pluginsData[plugin.constructor.identifier] = pluginData = (typeof plugin.analyze === \"function\" ? plugin.analyze() : void 0) || {};\n        pluginData.version = plugin.constructor.version;\n      }\n      this.connector.sendCommand({\n        command: 'info',\n        plugins: pluginsData,\n        url: this.window.location.href\n      });\n    };\n\n    return LiveReload;\n\n  })();\n\n}).call(this);\n\n},{\"./connector\":1,\"./options\":5,\"./reloader\":7,\"./timer\":9}],5:[function(require,module,exports){\n(function() {\n  var Options;\n\n  exports.Options = Options = (function() {\n    function Options() {\n      this.https = false;\n      this.host = null;\n      this.port = 35729;\n      this.snipver = null;\n      this.ext = null;\n      this.extver = null;\n      this.mindelay = 1000;\n      this.maxdelay = 60000;\n      this.handshake_timeout = 5000;\n    }\n\n    Options.prototype.set = function(name, value) {\n      if (typeof value === 'undefined') {\n        return;\n      }\n      if (!isNaN(+value)) {\n        value = +value;\n      }\n      return this[name] = value;\n    };\n\n    return Options;\n\n  })();\n\n  Options.extract = function(document) {\n    var element, keyAndValue, m, mm, options, pair, src, _i, _j, _len, _len1, _ref, _ref1;\n    _ref = document.getElementsByTagName('script');\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      element = _ref[_i];\n      if ((src = element.src) && (m = src.match(/^[^:]+:\\/\\/(.*)\\/z?livereload\\.js(?:\\?(.*))?$/))) {\n        options = new Options();\n        options.https = src.indexOf(\"https\") === 0;\n        if (mm = m[1].match(/^([^\\/:]+)(?::(\\d+))?$/)) {\n          options.host = mm[1];\n          if (mm[2]) {\n            options.port = parseInt(mm[2], 10);\n          }\n        }\n        if (m[2]) {\n          _ref1 = m[2].split('&');\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            pair = _ref1[_j];\n            if ((keyAndValue = pair.split('=')).length > 1) {\n              options.set(keyAndValue[0].replace(/-/g, '_'), keyAndValue.slice(1).join('='));\n            }\n          }\n        }\n        return options;\n      }\n    }\n    return null;\n  };\n\n}).call(this);\n\n},{}],6:[function(require,module,exports){\n(function() {\n  var PROTOCOL_6, PROTOCOL_7, Parser, ProtocolError,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  exports.PROTOCOL_6 = PROTOCOL_6 = 'http://livereload.com/protocols/official-6';\n\n  exports.PROTOCOL_7 = PROTOCOL_7 = 'http://livereload.com/protocols/official-7';\n\n  exports.ProtocolError = ProtocolError = (function() {\n    function ProtocolError(reason, data) {\n      this.message = \"LiveReload protocol error (\" + reason + \") after receiving data: \\\"\" + data + \"\\\".\";\n    }\n\n    return ProtocolError;\n\n  })();\n\n  exports.Parser = Parser = (function() {\n    function Parser(handlers) {\n      this.handlers = handlers;\n      this.reset();\n    }\n\n    Parser.prototype.reset = function() {\n      return this.protocol = null;\n    };\n\n    Parser.prototype.process = function(data) {\n      var command, e, message, options, _ref;\n      try {\n        if (this.protocol == null) {\n          if (data.match(/^!!ver:([\\d.]+)$/)) {\n            this.protocol = 6;\n          } else if (message = this._parseMessage(data, ['hello'])) {\n            if (!message.protocols.length) {\n              throw new ProtocolError(\"no protocols specified in handshake message\");\n            } else if (__indexOf.call(message.protocols, PROTOCOL_7) >= 0) {\n              this.protocol = 7;\n            } else if (__indexOf.call(message.protocols, PROTOCOL_6) >= 0) {\n              this.protocol = 6;\n            } else {\n              throw new ProtocolError(\"no supported protocols found\");\n            }\n          }\n          return this.handlers.connected(this.protocol);\n        } else if (this.protocol === 6) {\n          message = JSON.parse(data);\n          if (!message.length) {\n            throw new ProtocolError(\"protocol 6 messages must be arrays\");\n          }\n          command = message[0], options = message[1];\n          if (command !== 'refresh') {\n            throw new ProtocolError(\"unknown protocol 6 command\");\n          }\n          return this.handlers.message({\n            command: 'reload',\n            path: options.path,\n            liveCSS: (_ref = options.apply_css_live) != null ? _ref : true\n          });\n        } else {\n          message = this._parseMessage(data, ['reload', 'alert']);\n          return this.handlers.message(message);\n        }\n      } catch (_error) {\n        e = _error;\n        if (e instanceof ProtocolError) {\n          return this.handlers.error(e);\n        } else {\n          throw e;\n        }\n      }\n    };\n\n    Parser.prototype._parseMessage = function(data, validCommands) {\n      var e, message, _ref;\n      try {\n        message = JSON.parse(data);\n      } catch (_error) {\n        e = _error;\n        throw new ProtocolError('unparsable JSON', data);\n      }\n      if (!message.command) {\n        throw new ProtocolError('missing \"command\" key', data);\n      }\n      if (_ref = message.command, __indexOf.call(validCommands, _ref) < 0) {\n        throw new ProtocolError(\"invalid command '\" + message.command + \"', only valid commands are: \" + (validCommands.join(', ')) + \")\", data);\n      }\n      return message;\n    };\n\n    return Parser;\n\n  })();\n\n}).call(this);\n\n},{}],7:[function(require,module,exports){\n(function() {\n  var IMAGE_STYLES, Reloader, numberOfMatchingSegments, pathFromUrl, pathsMatch, pickBestMatch, splitUrl;\n\n  splitUrl = function(url) {\n    var hash, index, params;\n    if ((index = url.indexOf('#')) >= 0) {\n      hash = url.slice(index);\n      url = url.slice(0, index);\n    } else {\n      hash = '';\n    }\n    if ((index = url.indexOf('?')) >= 0) {\n      params = url.slice(index);\n      url = url.slice(0, index);\n    } else {\n      params = '';\n    }\n    return {\n      url: url,\n      params: params,\n      hash: hash\n    };\n  };\n\n  pathFromUrl = function(url) {\n    var path;\n    url = splitUrl(url).url;\n    if (url.indexOf('file://') === 0) {\n      path = url.replace(/^file:\\/\\/(localhost)?/, '');\n    } else {\n      path = url.replace(/^([^:]+:)?\\/\\/([^:\\/]+)(:\\d*)?\\//, '/');\n    }\n    return decodeURIComponent(path);\n  };\n\n  pickBestMatch = function(path, objects, pathFunc) {\n    var bestMatch, object, score, _i, _len;\n    bestMatch = {\n      score: 0\n    };\n    for (_i = 0, _len = objects.length; _i < _len; _i++) {\n      object = objects[_i];\n      score = numberOfMatchingSegments(path, pathFunc(object));\n      if (score > bestMatch.score) {\n        bestMatch = {\n          object: object,\n          score: score\n        };\n      }\n    }\n    if (bestMatch.score > 0) {\n      return bestMatch;\n    } else {\n      return null;\n    }\n  };\n\n  numberOfMatchingSegments = function(path1, path2) {\n    var comps1, comps2, eqCount, len;\n    path1 = path1.replace(/^\\/+/, '').toLowerCase();\n    path2 = path2.replace(/^\\/+/, '').toLowerCase();\n    if (path1 === path2) {\n      return 10000;\n    }\n    comps1 = path1.split('/').reverse();\n    comps2 = path2.split('/').reverse();\n    len = Math.min(comps1.length, comps2.length);\n    eqCount = 0;\n    while (eqCount < len && comps1[eqCount] === comps2[eqCount]) {\n      ++eqCount;\n    }\n    return eqCount;\n  };\n\n  pathsMatch = function(path1, path2) {\n    return numberOfMatchingSegments(path1, path2) > 0;\n  };\n\n  IMAGE_STYLES = [\n    {\n      selector: 'background',\n      styleNames: ['backgroundImage']\n    }, {\n      selector: 'border',\n      styleNames: ['borderImage', 'webkitBorderImage', 'MozBorderImage']\n    }\n  ];\n\n  exports.Reloader = Reloader = (function() {\n    function Reloader(window, console, Timer) {\n      this.window = window;\n      this.console = console;\n      this.Timer = Timer;\n      this.document = this.window.document;\n      this.importCacheWaitPeriod = 200;\n      this.plugins = [];\n    }\n\n    Reloader.prototype.addPlugin = function(plugin) {\n      return this.plugins.push(plugin);\n    };\n\n    Reloader.prototype.analyze = function(callback) {\n      return results;\n    };\n\n    Reloader.prototype.reload = function(path, options) {\n      var plugin, _base, _i, _len, _ref;\n      this.options = options;\n      if ((_base = this.options).stylesheetReloadTimeout == null) {\n        _base.stylesheetReloadTimeout = 15000;\n      }\n      _ref = this.plugins;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        plugin = _ref[_i];\n        if (plugin.reload && plugin.reload(path, options)) {\n          return;\n        }\n      }\n      if (options.liveCSS) {\n        if (path.match(/\\.css$/i)) {\n          if (this.reloadStylesheet(path)) {\n            return;\n          }\n        }\n      }\n      if (options.liveImg) {\n        if (path.match(/\\.(jpe?g|png|gif)$/i)) {\n          this.reloadImages(path);\n          return;\n        }\n      }\n      return this.reloadPage();\n    };\n\n    Reloader.prototype.reloadPage = function() {\n      return this.window.document.location.reload();\n    };\n\n    Reloader.prototype.reloadImages = function(path) {\n      var expando, img, selector, styleNames, styleSheet, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;\n      expando = this.generateUniqueString();\n      _ref = this.document.images;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        img = _ref[_i];\n        if (pathsMatch(path, pathFromUrl(img.src))) {\n          img.src = this.generateCacheBustUrl(img.src, expando);\n        }\n      }\n      if (this.document.querySelectorAll) {\n        for (_j = 0, _len1 = IMAGE_STYLES.length; _j < _len1; _j++) {\n          _ref1 = IMAGE_STYLES[_j], selector = _ref1.selector, styleNames = _ref1.styleNames;\n          _ref2 = this.document.querySelectorAll(\"[style*=\" + selector + \"]\");\n          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n            img = _ref2[_k];\n            this.reloadStyleImages(img.style, styleNames, path, expando);\n          }\n        }\n      }\n      if (this.document.styleSheets) {\n        _ref3 = this.document.styleSheets;\n        _results = [];\n        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\n          styleSheet = _ref3[_l];\n          _results.push(this.reloadStylesheetImages(styleSheet, path, expando));\n        }\n        return _results;\n      }\n    };\n\n    Reloader.prototype.reloadStylesheetImages = function(styleSheet, path, expando) {\n      var e, rule, rules, styleNames, _i, _j, _len, _len1;\n      try {\n        rules = styleSheet != null ? styleSheet.cssRules : void 0;\n      } catch (_error) {\n        e = _error;\n      }\n      if (!rules) {\n        return;\n      }\n      for (_i = 0, _len = rules.length; _i < _len; _i++) {\n        rule = rules[_i];\n        switch (rule.type) {\n          case CSSRule.IMPORT_RULE:\n            this.reloadStylesheetImages(rule.styleSheet, path, expando);\n            break;\n          case CSSRule.STYLE_RULE:\n            for (_j = 0, _len1 = IMAGE_STYLES.length; _j < _len1; _j++) {\n              styleNames = IMAGE_STYLES[_j].styleNames;\n              this.reloadStyleImages(rule.style, styleNames, path, expando);\n            }\n            break;\n          case CSSRule.MEDIA_RULE:\n            this.reloadStylesheetImages(rule, path, expando);\n        }\n      }\n    };\n\n    Reloader.prototype.reloadStyleImages = function(style, styleNames, path, expando) {\n      var newValue, styleName, value, _i, _len;\n      for (_i = 0, _len = styleNames.length; _i < _len; _i++) {\n        styleName = styleNames[_i];\n        value = style[styleName];\n        if (typeof value === 'string') {\n          newValue = value.replace(/\\burl\\s*\\(([^)]*)\\)/, (function(_this) {\n            return function(match, src) {\n              if (pathsMatch(path, pathFromUrl(src))) {\n                return \"url(\" + (_this.generateCacheBustUrl(src, expando)) + \")\";\n              } else {\n                return match;\n              }\n            };\n          })(this));\n          if (newValue !== value) {\n            style[styleName] = newValue;\n          }\n        }\n      }\n    };\n\n    Reloader.prototype.reloadStylesheet = function(path) {\n      var imported, link, links, match, style, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;\n      links = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.document.getElementsByTagName('link');\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          link = _ref[_i];\n          if (link.rel.match(/^stylesheet$/i) && !link.__LiveReload_pendingRemoval) {\n            _results.push(link);\n          }\n        }\n        return _results;\n      }).call(this);\n      imported = [];\n      _ref = this.document.getElementsByTagName('style');\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        style = _ref[_i];\n        if (style.sheet) {\n          this.collectImportedStylesheets(style, style.sheet, imported);\n        }\n      }\n      for (_j = 0, _len1 = links.length; _j < _len1; _j++) {\n        link = links[_j];\n        this.collectImportedStylesheets(link, link.sheet, imported);\n      }\n      if (this.window.StyleFix && this.document.querySelectorAll) {\n        _ref1 = this.document.querySelectorAll('style[data-href]');\n        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {\n          style = _ref1[_k];\n          links.push(style);\n        }\n      }\n      this.console.log(\"LiveReload found \" + links.length + \" LINKed stylesheets, \" + imported.length + \" @imported stylesheets\");\n      match = pickBestMatch(path, links.concat(imported), (function(_this) {\n        return function(l) {\n          return pathFromUrl(_this.linkHref(l));\n        };\n      })(this));\n      if (match) {\n        if (match.object.rule) {\n          this.console.log(\"LiveReload is reloading imported stylesheet: \" + match.object.href);\n          this.reattachImportedRule(match.object);\n        } else {\n          this.console.log(\"LiveReload is reloading stylesheet: \" + (this.linkHref(match.object)));\n          this.reattachStylesheetLink(match.object);\n        }\n      } else {\n        this.console.log(\"LiveReload will reload all stylesheets because path '\" + path + \"' did not match any specific one\");\n        for (_l = 0, _len3 = links.length; _l < _len3; _l++) {\n          link = links[_l];\n          this.reattachStylesheetLink(link);\n        }\n      }\n      return true;\n    };\n\n    Reloader.prototype.collectImportedStylesheets = function(link, styleSheet, result) {\n      var e, index, rule, rules, _i, _len;\n      try {\n        rules = styleSheet != null ? styleSheet.cssRules : void 0;\n      } catch (_error) {\n        e = _error;\n      }\n      if (rules && rules.length) {\n        for (index = _i = 0, _len = rules.length; _i < _len; index = ++_i) {\n          rule = rules[index];\n          switch (rule.type) {\n            case CSSRule.CHARSET_RULE:\n              continue;\n            case CSSRule.IMPORT_RULE:\n              result.push({\n                link: link,\n                rule: rule,\n                index: index,\n                href: rule.href\n              });\n              this.collectImportedStylesheets(link, rule.styleSheet, result);\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    };\n\n    Reloader.prototype.waitUntilCssLoads = function(clone, func) {\n      var callbackExecuted, executeCallback, poll;\n      callbackExecuted = false;\n      executeCallback = (function(_this) {\n        return function() {\n          if (callbackExecuted) {\n            return;\n          }\n          callbackExecuted = true;\n          return func();\n        };\n      })(this);\n      clone.onload = (function(_this) {\n        return function() {\n          _this.console.log(\"LiveReload: the new stylesheet has finished loading\");\n          _this.knownToSupportCssOnLoad = true;\n          return executeCallback();\n        };\n      })(this);\n      if (!this.knownToSupportCssOnLoad) {\n        (poll = (function(_this) {\n          return function() {\n            if (clone.sheet) {\n              _this.console.log(\"LiveReload is polling until the new CSS finishes loading...\");\n              return executeCallback();\n            } else {\n              return _this.Timer.start(50, poll);\n            }\n          };\n        })(this))();\n      }\n      return this.Timer.start(this.options.stylesheetReloadTimeout, executeCallback);\n    };\n\n    Reloader.prototype.linkHref = function(link) {\n      return link.href || link.getAttribute('data-href');\n    };\n\n    Reloader.prototype.reattachStylesheetLink = function(link) {\n      var clone, parent;\n      if (link.__LiveReload_pendingRemoval) {\n        return;\n      }\n      link.__LiveReload_pendingRemoval = true;\n      if (link.tagName === 'STYLE') {\n        clone = this.document.createElement('link');\n        clone.rel = 'stylesheet';\n        clone.media = link.media;\n        clone.disabled = link.disabled;\n      } else {\n        clone = link.cloneNode(false);\n      }\n      clone.href = this.generateCacheBustUrl(this.linkHref(link));\n      parent = link.parentNode;\n      if (parent.lastChild === link) {\n        parent.appendChild(clone);\n      } else {\n        parent.insertBefore(clone, link.nextSibling);\n      }\n      return this.waitUntilCssLoads(clone, (function(_this) {\n        return function() {\n          var additionalWaitingTime;\n          if (/AppleWebKit/.test(navigator.userAgent)) {\n            additionalWaitingTime = 5;\n          } else {\n            additionalWaitingTime = 200;\n          }\n          return _this.Timer.start(additionalWaitingTime, function() {\n            var _ref;\n            if (!link.parentNode) {\n              return;\n            }\n            link.parentNode.removeChild(link);\n            clone.onreadystatechange = null;\n            return (_ref = _this.window.StyleFix) != null ? _ref.link(clone) : void 0;\n          });\n        };\n      })(this));\n    };\n\n    Reloader.prototype.reattachImportedRule = function(_arg) {\n      var href, index, link, media, newRule, parent, rule, tempLink;\n      rule = _arg.rule, index = _arg.index, link = _arg.link;\n      parent = rule.parentStyleSheet;\n      href = this.generateCacheBustUrl(rule.href);\n      media = rule.media.length ? [].join.call(rule.media, ', ') : '';\n      newRule = \"@import url(\\\"\" + href + \"\\\") \" + media + \";\";\n      rule.__LiveReload_newHref = href;\n      tempLink = this.document.createElement(\"link\");\n      tempLink.rel = 'stylesheet';\n      tempLink.href = href;\n      tempLink.__LiveReload_pendingRemoval = true;\n      if (link.parentNode) {\n        link.parentNode.insertBefore(tempLink, link);\n      }\n      return this.Timer.start(this.importCacheWaitPeriod, (function(_this) {\n        return function() {\n          if (tempLink.parentNode) {\n            tempLink.parentNode.removeChild(tempLink);\n          }\n          if (rule.__LiveReload_newHref !== href) {\n            return;\n          }\n          parent.insertRule(newRule, index);\n          parent.deleteRule(index + 1);\n          rule = parent.cssRules[index];\n          rule.__LiveReload_newHref = href;\n          return _this.Timer.start(_this.importCacheWaitPeriod, function() {\n            if (rule.__LiveReload_newHref !== href) {\n              return;\n            }\n            parent.insertRule(newRule, index);\n            return parent.deleteRule(index + 1);\n          });\n        };\n      })(this));\n    };\n\n    Reloader.prototype.generateUniqueString = function() {\n      return 'livereload=' + Date.now();\n    };\n\n    Reloader.prototype.generateCacheBustUrl = function(url, expando) {\n      var hash, oldParams, originalUrl, params, _ref;\n      if (expando == null) {\n        expando = this.generateUniqueString();\n      }\n      _ref = splitUrl(url), url = _ref.url, hash = _ref.hash, oldParams = _ref.params;\n      if (this.options.overrideURL) {\n        if (url.indexOf(this.options.serverURL) < 0) {\n          originalUrl = url;\n          url = this.options.serverURL + this.options.overrideURL + \"?url=\" + encodeURIComponent(url);\n          this.console.log(\"LiveReload is overriding source URL \" + originalUrl + \" with \" + url);\n        }\n      }\n      params = oldParams.replace(/(\\?|&)livereload=(\\d+)/, function(match, sep) {\n        return \"\" + sep + expando;\n      });\n      if (params === oldParams) {\n        if (oldParams.length === 0) {\n          params = \"?\" + expando;\n        } else {\n          params = \"\" + oldParams + \"&\" + expando;\n        }\n      }\n      return url + params + hash;\n    };\n\n    return Reloader;\n\n  })();\n\n}).call(this);\n\n},{}],8:[function(require,module,exports){\n(function() {\n  var CustomEvents, LiveReload, k;\n\n  CustomEvents = require('./customevents');\n\n  LiveReload = window.LiveReload = new (require('./livereload').LiveReload)(window);\n\n  for (k in window) {\n    if (k.match(/^LiveReloadPlugin/)) {\n      LiveReload.addPlugin(window[k]);\n    }\n  }\n\n  LiveReload.addPlugin(require('./less'));\n\n  LiveReload.on('shutdown', function() {\n    return delete window.LiveReload;\n  });\n\n  LiveReload.on('connect', function() {\n    return CustomEvents.fire(document, 'LiveReloadConnect');\n  });\n\n  LiveReload.on('disconnect', function() {\n    return CustomEvents.fire(document, 'LiveReloadDisconnect');\n  });\n\n  CustomEvents.bind(document, 'LiveReloadShutDown', function() {\n    return LiveReload.shutDown();\n  });\n\n}).call(this);\n\n},{\"./customevents\":2,\"./less\":3,\"./livereload\":4}],9:[function(require,module,exports){\n(function() {\n  var Timer;\n\n  exports.Timer = Timer = (function() {\n    function Timer(func) {\n      this.func = func;\n      this.running = false;\n      this.id = null;\n      this._handler = (function(_this) {\n        return function() {\n          _this.running = false;\n          _this.id = null;\n          return _this.func();\n        };\n      })(this);\n    }\n\n    Timer.prototype.start = function(timeout) {\n      if (this.running) {\n        clearTimeout(this.id);\n      }\n      this.id = setTimeout(this._handler, timeout);\n      return this.running = true;\n    };\n\n    Timer.prototype.stop = function() {\n      if (this.running) {\n        clearTimeout(this.id);\n        this.running = false;\n        return this.id = null;\n      }\n    };\n\n    return Timer;\n\n  })();\n\n  Timer.start = function(timeout, func) {\n    return setTimeout(func, timeout);\n  };\n\n}).call(this);\n\n},{}]},{},[8]);\n"}